{"version":3,"file":"createCoplanarPolygonGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingRectangle from \"./BoundingRectangle.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryInstance from \"./GeometryInstance.js\";\r\nimport GeometryPipeline from \"./GeometryPipeline.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nconst scratchPosition = new Cartesian3();\r\nconst scratchBR = new BoundingRectangle();\r\nconst stScratch = new Cartesian2();\r\nconst textureCoordinatesOrigin = new Cartesian2();\r\nconst scratchNormal = new Cartesian3();\r\nconst scratchTangent = new Cartesian3();\r\nconst scratchBitangent = new Cartesian3();\r\nconst centerScratch = new Cartesian3();\r\nconst axis1Scratch = new Cartesian3();\r\nconst axis2Scratch = new Cartesian3();\r\nconst quaternionScratch = new Quaternion();\r\nconst textureMatrixScratch = new Matrix3();\r\nconst tangentRotationScratch = new Matrix3();\r\nconst surfaceNormalScratch = new Cartesian3();\r\n\r\nfunction createGeometryFromPolygon(\r\n  polygon,\r\n  vertexFormat,\r\n  boundingRectangle,\r\n  stRotation,\r\n  hardcodedTextureCoordinates,\r\n  projectPointTo2D,\r\n  normal,\r\n  tangent,\r\n  bitangent\r\n) {\r\n  const positions = polygon.positions;\r\n  let indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\r\n\r\n  /* If polygon is completely unrenderable, just use the first three vertices */\r\n  if (indices.length < 3) {\r\n    indices = [0, 1, 2];\r\n  }\r\n\r\n  const newIndices = IndexDatatype.createTypedArray(\r\n    positions.length,\r\n    indices.length\r\n  );\r\n  newIndices.set(indices);\r\n\r\n  let textureMatrix = textureMatrixScratch;\r\n  if (stRotation !== 0.0) {\r\n    let rotation = Quaternion.fromAxisAngle(\r\n      normal,\r\n      stRotation,\r\n      quaternionScratch\r\n    );\r\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n      rotation = Quaternion.fromAxisAngle(\r\n        normal,\r\n        -stRotation,\r\n        quaternionScratch\r\n      );\r\n      const tangentRotation = Matrix3.fromQuaternion(\r\n        rotation,\r\n        tangentRotationScratch\r\n      );\r\n\r\n      tangent = Cartesian3.normalize(\r\n        Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\r\n        tangent\r\n      );\r\n      if (vertexFormat.bitangent) {\r\n        bitangent = Cartesian3.normalize(\r\n          Cartesian3.cross(normal, tangent, bitangent),\r\n          bitangent\r\n        );\r\n      }\r\n    }\r\n  } else {\r\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n  }\r\n\r\n  const stOrigin = textureCoordinatesOrigin;\r\n  if (vertexFormat.st) {\r\n    stOrigin.x = boundingRectangle.x;\r\n    stOrigin.y = boundingRectangle.y;\r\n  }\r\n\r\n  const length = positions.length;\r\n  const size = length * 3;\r\n  const flatPositions = new Float64Array(size);\r\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n  const bitangents = vertexFormat.bitangent\r\n    ? new Float32Array(size)\r\n    : undefined;\r\n  const textureCoordinates = vertexFormat.st\r\n    ? new Float32Array(length * 2)\r\n    : undefined;\r\n\r\n  let positionIndex = 0;\r\n  let normalIndex = 0;\r\n  let bitangentIndex = 0;\r\n  let tangentIndex = 0;\r\n  let stIndex = 0;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const position = positions[i];\r\n    flatPositions[positionIndex++] = position.x;\r\n    flatPositions[positionIndex++] = position.y;\r\n    flatPositions[positionIndex++] = position.z;\r\n\r\n    if (vertexFormat.st) {\r\n      if (\r\n        defined(hardcodedTextureCoordinates) &&\r\n        hardcodedTextureCoordinates.positions.length === length\r\n      ) {\r\n        textureCoordinates[stIndex++] =\r\n          hardcodedTextureCoordinates.positions[i].x;\r\n        textureCoordinates[stIndex++] =\r\n          hardcodedTextureCoordinates.positions[i].y;\r\n      } else {\r\n        const p = Matrix3.multiplyByVector(\r\n          textureMatrix,\r\n          position,\r\n          scratchPosition\r\n        );\r\n        const st = projectPointTo2D(p, stScratch);\r\n        Cartesian2.subtract(st, stOrigin, st);\r\n\r\n        const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\r\n        const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\r\n        textureCoordinates[stIndex++] = stx;\r\n        textureCoordinates[stIndex++] = sty;\r\n      }\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n      normals[normalIndex++] = normal.x;\r\n      normals[normalIndex++] = normal.y;\r\n      normals[normalIndex++] = normal.z;\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n      tangents[tangentIndex++] = tangent.x;\r\n      tangents[tangentIndex++] = tangent.y;\r\n      tangents[tangentIndex++] = tangent.z;\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n      bitangents[bitangentIndex++] = bitangent.x;\r\n      bitangents[bitangentIndex++] = bitangent.y;\r\n      bitangents[bitangentIndex++] = bitangent.z;\r\n    }\r\n  }\r\n\r\n  const attributes = new GeometryAttributes();\r\n\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: flatPositions,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.normal) {\r\n    attributes.normal = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: normals,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.tangent) {\r\n    attributes.tangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: tangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.bitangent) {\r\n    attributes.bitangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: bitangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.st) {\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: textureCoordinates,\r\n    });\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: newIndices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n  });\r\n}\r\n\r\n/**\r\n * A description of a polygon composed of arbitrary coplanar positions.\r\n *\r\n * @alias CoplanarPolygonGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\r\n *\r\n * @example\r\n * const polygonGeometry = new Cesium.CoplanarPolygonGeometry({\r\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\r\n *      -90.0, 30.0, 0.0,\r\n *      -90.0, 30.0, 300000.0,\r\n *      -80.0, 30.0, 300000.0,\r\n *      -80.0, 30.0, 0.0\r\n *   ]))\r\n * });\r\n *\r\n */\r\nfunction CoplanarPolygonGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  const polygonHierarchy = options.polygonHierarchy;\r\n  const textureCoordinates = options.textureCoordinates;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\r\n  //>>includeEnd('debug');\r\n\r\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n  this._polygonHierarchy = polygonHierarchy;\r\n  this._stRotation = defaultValue(options.stRotation, 0.0);\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._workerName = \"createCoplanarPolygonGeometry\";\r\n  this._textureCoordinates = textureCoordinates;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\r\n      polygonHierarchy,\r\n      Cartesian3\r\n    ) +\r\n    VertexFormat.packedLength +\r\n    Ellipsoid.packedLength +\r\n    (defined(textureCoordinates)\r\n      ? PolygonGeometryLibrary.computeHierarchyPackedLength(\r\n          textureCoordinates,\r\n          Cartesian2\r\n        )\r\n      : 1) +\r\n    2;\r\n}\r\n\r\n/**\r\n * A description of a coplanar polygon from an array of positions.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\r\n * @returns {CoplanarPolygonGeometry}\r\n *\r\n * @example\r\n * // create a polygon from points\r\n * const polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0,\r\n *     -75.0, 30.0,\r\n *     -70.0, 30.0,\r\n *     -68.0, 40.0\r\n *   ])\r\n * });\r\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n *\r\n * @see PolygonGeometry#createGeometry\r\n */\r\nCoplanarPolygonGeometry.fromPositions = function (options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"options.positions\", options.positions);\r\n  //>>includeEnd('debug');\r\n\r\n  const newOptions = {\r\n    polygonHierarchy: {\r\n      positions: options.positions,\r\n    },\r\n    vertexFormat: options.vertexFormat,\r\n    stRotation: options.stRotation,\r\n    ellipsoid: options.ellipsoid,\r\n    textureCoordinates: options.textureCoordinates,\r\n  };\r\n  return new CoplanarPolygonGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CoplanarPolygonGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\r\n    value._polygonHierarchy,\r\n    array,\r\n    startingIndex,\r\n    Cartesian3\r\n  );\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._stRotation;\r\n  if (defined(value._textureCoordinates)) {\r\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\r\n      value._textureCoordinates,\r\n      array,\r\n      startingIndex,\r\n      Cartesian2\r\n    );\r\n  } else {\r\n    array[startingIndex++] = -1.0;\r\n  }\r\n  array[startingIndex++] = value.packedLength;\r\n\r\n  return array;\r\n};\r\n\r\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nconst scratchVertexFormat = new VertexFormat();\r\nconst scratchOptions = {\r\n  polygonHierarchy: {},\r\n};\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\r\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\r\n */\r\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\r\n    array,\r\n    startingIndex,\r\n    Cartesian3\r\n  );\r\n  startingIndex = polygonHierarchy.startingIndex;\r\n  delete polygonHierarchy.startingIndex;\r\n\r\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  const vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  const stRotation = array[startingIndex++];\r\n  const textureCoordinates =\r\n    array[startingIndex] === -1.0\r\n      ? undefined\r\n      : PolygonGeometryLibrary.unpackPolygonHierarchy(\r\n          array,\r\n          startingIndex,\r\n          Cartesian2\r\n        );\r\n  if (defined(textureCoordinates)) {\r\n    startingIndex = textureCoordinates.startingIndex;\r\n    delete textureCoordinates.startingIndex;\r\n  } else {\r\n    startingIndex++;\r\n  }\r\n  const packedLength = array[startingIndex++];\r\n\r\n  if (!defined(result)) {\r\n    result = new CoplanarPolygonGeometry(scratchOptions);\r\n  }\r\n\r\n  result._polygonHierarchy = polygonHierarchy;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._stRotation = stRotation;\r\n  result._textureCoordinates = textureCoordinates;\r\n  result.packedLength = packedLength;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\r\n  const vertexFormat = polygonGeometry._vertexFormat;\r\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n  const stRotation = polygonGeometry._stRotation;\r\n  const textureCoordinates = polygonGeometry._textureCoordinates;\r\n  const hasTextureCoordinates = defined(textureCoordinates);\r\n\r\n  let outerPositions = polygonHierarchy.positions;\r\n  outerPositions = arrayRemoveDuplicates(\r\n    outerPositions,\r\n    Cartesian3.equalsEpsilon,\r\n    true\r\n  );\r\n  if (outerPositions.length < 3) {\r\n    return;\r\n  }\r\n\r\n  let normal = scratchNormal;\r\n  let tangent = scratchTangent;\r\n  let bitangent = scratchBitangent;\r\n  let axis1 = axis1Scratch;\r\n  const axis2 = axis2Scratch;\r\n\r\n  const validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\r\n    outerPositions,\r\n    centerScratch,\r\n    axis1,\r\n    axis2\r\n  );\r\n  if (!validGeometry) {\r\n    return undefined;\r\n  }\r\n\r\n  normal = Cartesian3.cross(axis1, axis2, normal);\r\n  normal = Cartesian3.normalize(normal, normal);\r\n\r\n  if (\r\n    !Cartesian3.equalsEpsilon(\r\n      centerScratch,\r\n      Cartesian3.ZERO,\r\n      CesiumMath.EPSILON6\r\n    )\r\n  ) {\r\n    const surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\r\n      centerScratch,\r\n      surfaceNormalScratch\r\n    );\r\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\r\n      normal = Cartesian3.negate(normal, normal);\r\n      axis1 = Cartesian3.negate(axis1, axis1);\r\n    }\r\n  }\r\n\r\n  const projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\r\n    centerScratch,\r\n    axis1,\r\n    axis2\r\n  );\r\n  const projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\r\n    centerScratch,\r\n    axis1,\r\n    axis2\r\n  );\r\n\r\n  if (vertexFormat.tangent) {\r\n    tangent = Cartesian3.clone(axis1, tangent);\r\n  }\r\n  if (vertexFormat.bitangent) {\r\n    bitangent = Cartesian3.clone(axis2, bitangent);\r\n  }\r\n\r\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\r\n    polygonHierarchy,\r\n    hasTextureCoordinates,\r\n    projectPoints,\r\n    false\r\n  );\r\n  const hierarchy = results.hierarchy;\r\n  const polygons = results.polygons;\r\n\r\n  const dummyFunction = function (identity) {\r\n    return identity;\r\n  };\r\n\r\n  const textureCoordinatePolygons = hasTextureCoordinates\r\n    ? PolygonGeometryLibrary.polygonsFromHierarchy(\r\n        textureCoordinates,\r\n        true,\r\n        dummyFunction,\r\n        false\r\n      ).polygons\r\n    : undefined;\r\n\r\n  if (hierarchy.length === 0) {\r\n    return;\r\n  }\r\n  outerPositions = hierarchy[0].outerRing;\r\n\r\n  const boundingSphere = BoundingSphere.fromPoints(outerPositions);\r\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\r\n    normal,\r\n    projectPoint,\r\n    outerPositions,\r\n    stRotation,\r\n    scratchBR\r\n  );\r\n\r\n  const geometries = [];\r\n  for (let i = 0; i < polygons.length; i++) {\r\n    const geometryInstance = new GeometryInstance({\r\n      geometry: createGeometryFromPolygon(\r\n        polygons[i],\r\n        vertexFormat,\r\n        boundingRectangle,\r\n        stRotation,\r\n        hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\r\n        projectPoint,\r\n        normal,\r\n        tangent,\r\n        bitangent\r\n      ),\r\n    });\r\n\r\n    geometries.push(geometryInstance);\r\n  }\r\n\r\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n  geometry.attributes.position.values = new Float64Array(\r\n    geometry.attributes.position.values\r\n  );\r\n  geometry.indices = IndexDatatype.createTypedArray(\r\n    geometry.attributes.position.values.length / 3,\r\n    geometry.indices\r\n  );\r\n\r\n  const attributes = geometry.attributes;\r\n  if (!vertexFormat.position) {\r\n    delete attributes.position;\r\n  }\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: geometry.indices,\r\n    primitiveType: geometry.primitiveType,\r\n    boundingSphere: boundingSphere,\r\n  });\r\n};\r\nexport default CoplanarPolygonGeometry;\r\n","import CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\n\r\nfunction createCoplanarPolygonGeometry(polygonGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\r\n  }\r\n  return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\r\n}\r\nexport default createCoplanarPolygonGeometry;\r\n"],"names":["scratchPosition","Cartesian3","scratchBR","BoundingRectangle","stScratch","Cartesian2","textureCoordinatesOrigin","scratchNormal","scratchTangent","scratchBitangent","centerScratch","axis1Scratch","axis2Scratch","quaternionScratch","Quaternion","textureMatrixScratch","Matrix3","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","polygon","vertexFormat","boundingRectangle","stRotation","hardcodedTextureCoordinates","projectPointTo2D","normal","tangent","bitangent","positions","indices","PolygonPipeline","triangulate","positions2D","holes","length","newIndices","IndexDatatype","createTypedArray","set","textureMatrix","rotation","fromAxisAngle","fromQuaternion","tangentRotation","normalize","multiplyByVector","cross","clone","IDENTITY","stOrigin","st","x","y","size","flatPositions","Float64Array","normals","Float32Array","undefined","tangents","bitangents","textureCoordinates","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","i","position","z","defined","subtract","stx","CesiumMath","clamp","width","sty","height","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","Geometry","primitiveType","PrimitiveType","TRIANGLES","CoplanarPolygonGeometry","options","polygonHierarchy","defaultValue","EMPTY_OBJECT","Check","VertexFormat","DEFAULT","this","_vertexFormat","_polygonHierarchy","_stRotation","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","_textureCoordinates","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","hasTextureCoordinates","outerPositions","arrayRemoveDuplicates","equalsEpsilon","axis1","axis2","CoplanarPolygonGeometryLibrary","computeProjectTo2DArguments","ZERO","EPSILON6","surfaceNormal","geodeticSurfaceNormal","dot","negate","projectPoints","createProjectPointsTo2DFunction","projectPoint","createProjectPointTo2DFunction","results","polygonsFromHierarchy","hierarchy","polygons","textureCoordinatePolygons","identity","outerRing","boundingSphere","BoundingSphere","fromPoints","computeBoundingRectangle","geometries","geometryInstance","GeometryInstance","geometry","push","GeometryPipeline","combineInstances","offset"],"mappings":"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"}