/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.95
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
define(["./defaultValue-ac2201bb","./Matrix2-5bde29de","./Transforms-3f580a0c","./RuntimeError-d45af186","./ComponentDatatype-164c57e1","./GeometryAttribute-f83e6129","./GeometryAttributes-d060f8b5","./GeometryInstance-2bd4ec32","./GeometryOffsetAttribute-a17b96d9","./GeometryPipeline-690feb65","./IndexDatatype-4e1ec1a1","./PolygonPipeline-71d5516a","./RectangleGeometryLibrary-26535834","./VertexFormat-4a6cdfad","./_commonjsHelpers-3aae1032-ac53d93e","./combine-0dce9b0f","./WebGLConstants-e12cdc8a","./AttributeCompression-1cfcbb75","./EncodedCartesian3-83872b10","./IntersectionTests-0d91a773","./Plane-3ad20be7","./EllipsoidRhumbLine-bfb4fa95"],(function(t,e,n,a,o,r,i,s,l,u,c,m,p,d,g,y,f,h,b,_,A,w){"use strict";const x=new e.Cartesian3,C=new e.Cartesian3,v=new e.Cartesian3,R=new e.Cartesian3,E=new e.Rectangle,G=new e.Cartesian2,F=new n.BoundingSphere,P=new n.BoundingSphere;function V(t,e){const n=new r.Geometry({attributes:new i.GeometryAttributes,primitiveType:r.PrimitiveType.TRIANGLES});return n.attributes.position=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e.positions}),t.normal&&(n.attributes.normal=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e.normals})),t.tangent&&(n.attributes.tangent=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e.tangents})),t.bitangent&&(n.attributes.bitangent=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:e.bitangents})),n}const D=new e.Cartesian3,L=new e.Cartesian3;function M(t,n){const a=t._vertexFormat,i=t._ellipsoid,s=n.height,l=n.width,u=n.northCap,m=n.southCap;let d=0,g=s,y=s,f=0;u&&(d=1,y-=1,f+=1),m&&(g-=1,y-=1,f+=1),f+=l*y;const h=a.position?new Float64Array(3*f):void 0,b=a.st?new Float32Array(2*f):void 0;let _=0,A=0;const w=x,E=G;let F=Number.MAX_VALUE,P=Number.MAX_VALUE,D=-Number.MAX_VALUE,L=-Number.MAX_VALUE;for(let t=d;t<g;++t)for(let e=0;e<l;++e)p.RectangleGeometryLibrary.computePosition(n,i,a.st,t,e,w,E),h[_++]=w.x,h[_++]=w.y,h[_++]=w.z,a.st&&(b[A++]=E.x,b[A++]=E.y,F=Math.min(F,E.x),P=Math.min(P,E.y),D=Math.max(D,E.x),L=Math.max(L,E.y));if(u&&(p.RectangleGeometryLibrary.computePosition(n,i,a.st,0,0,w,E),h[_++]=w.x,h[_++]=w.y,h[_++]=w.z,a.st&&(b[A++]=E.x,b[A++]=E.y,F=E.x,P=E.y,D=E.x,L=E.y)),m&&(p.RectangleGeometryLibrary.computePosition(n,i,a.st,s-1,0,w,E),h[_++]=w.x,h[_++]=w.y,h[_]=w.z,a.st&&(b[A++]=E.x,b[A]=E.y,F=Math.min(F,E.x),P=Math.min(P,E.y),D=Math.max(D,E.x),L=Math.max(L,E.y))),a.st&&(F<0||P<0||D>1||L>1))for(let t=0;t<b.length;t+=2)b[t]=(b[t]-F)/(D-F),b[t+1]=(b[t+1]-P)/(L-P);const M=function(t,n,a,o){const r=t.length,i=n.normal?new Float32Array(r):void 0,s=n.tangent?new Float32Array(r):void 0,l=n.bitangent?new Float32Array(r):void 0;let u=0;const c=R,m=v;let p=C;if(n.normal||n.tangent||n.bitangent)for(let d=0;d<r;d+=3){const r=e.Cartesian3.fromArray(t,d,x),g=u+1,y=u+2;p=a.geodeticSurfaceNormal(r,p),(n.tangent||n.bitangent)&&(e.Cartesian3.cross(e.Cartesian3.UNIT_Z,p,m),e.Matrix3.multiplyByVector(o,m,m),e.Cartesian3.normalize(m,m),n.bitangent&&e.Cartesian3.normalize(e.Cartesian3.cross(p,m,c),c)),n.normal&&(i[u]=p.x,i[g]=p.y,i[y]=p.z),n.tangent&&(s[u]=m.x,s[g]=m.y,s[y]=m.z),n.bitangent&&(l[u]=c.x,l[g]=c.y,l[y]=c.z),u+=3}return V(n,{positions:t,normals:i,tangents:s,bitangents:l})}(h,a,i,n.tangentRotationMatrix);let O=6*(l-1)*(y-1);u&&(O+=3*(l-1)),m&&(O+=3*(l-1));const T=c.IndexDatatype.createTypedArray(f,O);let N,k=0,S=0;for(N=0;N<y-1;++N){for(let t=0;t<l-1;++t){const t=k,e=t+l,n=e+1,a=t+1;T[S++]=t,T[S++]=e,T[S++]=a,T[S++]=a,T[S++]=e,T[S++]=n,++k}++k}if(u||m){let t=f-1;const e=f-1;let n,a;if(u&&m&&(t=f-2),k=0,u)for(N=0;N<l-1;N++)n=k,a=n+1,T[S++]=t,T[S++]=n,T[S++]=a,++k;if(m)for(k=(y-1)*l,N=0;N<l-1;N++)n=k,a=n+1,T[S++]=n,T[S++]=e,T[S++]=a,++k}return M.indices=T,a.st&&(M.attributes.st=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:b})),M}function O(t,e,n,a,o){return t[e++]=a[n],t[e++]=a[n+1],t[e++]=a[n+2],t[e++]=o[n],t[e++]=o[n+1],t[e]=o[n+2],t}function T(t,e,n,a){return t[e++]=a[n],t[e++]=a[n+1],t[e++]=a[n],t[e]=a[n+1],t}const N=new d.VertexFormat;function k(n,a){const i=n._shadowVolume,p=n._offsetAttribute,g=n._vertexFormat,y=n._extrudedHeight,f=n._surfaceHeight,h=n._ellipsoid,b=a.height,_=a.width;let A;if(i){const t=d.VertexFormat.clone(g,N);t.normal=!0,n._vertexFormat=t}const w=M(n,a);i&&(n._vertexFormat=g);let E=m.PolygonPipeline.scaleToGeodeticHeight(w.attributes.position.values,f,h,!1);E=new Float64Array(E);let G=E.length;const F=2*G,P=new Float64Array(F);P.set(E);const k=m.PolygonPipeline.scaleToGeodeticHeight(w.attributes.position.values,y,h);P.set(k,G),w.attributes.position.values=P;const S=g.normal?new Float32Array(F):void 0,I=g.tangent?new Float32Array(F):void 0,H=g.bitangent?new Float32Array(F):void 0,z=g.st?new Float32Array(F/3*2):void 0;let B,U,q;if(g.normal){for(U=w.attributes.normal.values,S.set(U),A=0;A<G;A++)U[A]=-U[A];S.set(U,G),w.attributes.normal.values=S}if(i){U=w.attributes.normal.values,g.normal||(w.attributes.normal=void 0);const t=new Float32Array(F);for(A=0;A<G;A++)U[A]=-U[A];t.set(U,G),w.attributes.extrudeDirection=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:t})}const Y=t.defined(p);if(Y){const t=G/3*2;let e=new Uint8Array(t);p===l.GeometryOffsetAttribute.TOP?e=e.fill(1,0,t/2):(q=p===l.GeometryOffsetAttribute.NONE?0:1,e=e.fill(q)),w.attributes.applyOffset=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:e})}if(g.tangent){const t=w.attributes.tangent.values;for(I.set(t),A=0;A<G;A++)t[A]=-t[A];I.set(t,G),w.attributes.tangent.values=I}if(g.bitangent){const t=w.attributes.bitangent.values;H.set(t),H.set(t,G),w.attributes.bitangent.values=H}g.st&&(B=w.attributes.st.values,z.set(B),z.set(B,G/3*2),w.attributes.st.values=z);const j=w.indices,X=j.length,Q=G/3,W=c.IndexDatatype.createTypedArray(F/3,2*X);for(W.set(j),A=0;A<X;A+=3)W[A+X]=j[A+2]+Q,W[A+1+X]=j[A+1]+Q,W[A+2+X]=j[A]+Q;w.indices=W;const J=a.northCap,Z=a.southCap;let K=b,$=2,tt=0,et=4,nt=4;J&&($-=1,K-=1,tt+=1,et-=2,nt-=1),Z&&($-=1,K-=1,tt+=1,et-=2,nt-=1),tt+=$*_+2*K-et;const at=2*(tt+nt);let ot=new Float64Array(3*at);const rt=i?new Float32Array(3*at):void 0;let it=Y?new Uint8Array(at):void 0,st=g.st?new Float32Array(2*at):void 0;const lt=p===l.GeometryOffsetAttribute.TOP;Y&&!lt&&(q=p===l.GeometryOffsetAttribute.ALL?1:0,it=it.fill(q));let ut=0,ct=0,mt=0,pt=0;const dt=_*K;let gt;for(A=0;A<dt;A+=_)gt=3*A,ot=O(ot,ut,gt,E,k),ut+=6,g.st&&(st=T(st,ct,2*A,B),ct+=4),i&&(mt+=3,rt[mt++]=U[gt],rt[mt++]=U[gt+1],rt[mt++]=U[gt+2]),lt&&(it[pt++]=1,pt+=1);if(Z){const t=J?dt+1:dt;for(gt=3*t,A=0;A<2;A++)ot=O(ot,ut,gt,E,k),ut+=6,g.st&&(st=T(st,ct,2*t,B),ct+=4),i&&(mt+=3,rt[mt++]=U[gt],rt[mt++]=U[gt+1],rt[mt++]=U[gt+2]),lt&&(it[pt++]=1,pt+=1)}else for(A=dt-_;A<dt;A++)gt=3*A,ot=O(ot,ut,gt,E,k),ut+=6,g.st&&(st=T(st,ct,2*A,B),ct+=4),i&&(mt+=3,rt[mt++]=U[gt],rt[mt++]=U[gt+1],rt[mt++]=U[gt+2]),lt&&(it[pt++]=1,pt+=1);for(A=dt-1;A>0;A-=_)gt=3*A,ot=O(ot,ut,gt,E,k),ut+=6,g.st&&(st=T(st,ct,2*A,B),ct+=4),i&&(mt+=3,rt[mt++]=U[gt],rt[mt++]=U[gt+1],rt[mt++]=U[gt+2]),lt&&(it[pt++]=1,pt+=1);if(J){const t=dt;for(gt=3*t,A=0;A<2;A++)ot=O(ot,ut,gt,E,k),ut+=6,g.st&&(st=T(st,ct,2*t,B),ct+=4),i&&(mt+=3,rt[mt++]=U[gt],rt[mt++]=U[gt+1],rt[mt++]=U[gt+2]),lt&&(it[pt++]=1,pt+=1)}else for(A=_-1;A>=0;A--)gt=3*A,ot=O(ot,ut,gt,E,k),ut+=6,g.st&&(st=T(st,ct,2*A,B),ct+=4),i&&(mt+=3,rt[mt++]=U[gt],rt[mt++]=U[gt+1],rt[mt++]=U[gt+2]),lt&&(it[pt++]=1,pt+=1);let yt=function(t,n,a){const r=t.length,i=n.normal?new Float32Array(r):void 0,s=n.tangent?new Float32Array(r):void 0,l=n.bitangent?new Float32Array(r):void 0;let u=0,c=0,m=0,p=!0,d=R,g=v,y=C;if(n.normal||n.tangent||n.bitangent)for(let f=0;f<r;f+=6){const h=e.Cartesian3.fromArray(t,f,x),b=e.Cartesian3.fromArray(t,(f+6)%r,D);if(p){const n=e.Cartesian3.fromArray(t,(f+3)%r,L);e.Cartesian3.subtract(b,h,b),e.Cartesian3.subtract(n,h,n),y=e.Cartesian3.normalize(e.Cartesian3.cross(n,b,y),y),p=!1}e.Cartesian3.equalsEpsilon(b,h,o.CesiumMath.EPSILON10)&&(p=!0),(n.tangent||n.bitangent)&&(d=a.geodeticSurfaceNormal(h,d),n.tangent&&(g=e.Cartesian3.normalize(e.Cartesian3.cross(d,y,g),g))),n.normal&&(i[u++]=y.x,i[u++]=y.y,i[u++]=y.z,i[u++]=y.x,i[u++]=y.y,i[u++]=y.z),n.tangent&&(s[c++]=g.x,s[c++]=g.y,s[c++]=g.z,s[c++]=g.x,s[c++]=g.y,s[c++]=g.z),n.bitangent&&(l[m++]=d.x,l[m++]=d.y,l[m++]=d.z,l[m++]=d.x,l[m++]=d.y,l[m++]=d.z)}return V(n,{positions:t,normals:i,tangents:s,bitangents:l})}(ot,g,h);g.st&&(yt.attributes.st=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:st})),i&&(yt.attributes.extrudeDirection=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:rt})),Y&&(yt.attributes.applyOffset=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:it}));const ft=c.IndexDatatype.createTypedArray(at,6*tt);let ht,bt,_t,At;G=ot.length/3;let wt=0;for(A=0;A<G-1;A+=2){ht=A,At=(ht+2)%G;const t=e.Cartesian3.fromArray(ot,3*ht,D),n=e.Cartesian3.fromArray(ot,3*At,L);e.Cartesian3.equalsEpsilon(t,n,o.CesiumMath.EPSILON10)||(bt=(ht+1)%G,_t=(bt+2)%G,ft[wt++]=ht,ft[wt++]=bt,ft[wt++]=At,ft[wt++]=At,ft[wt++]=bt,ft[wt++]=_t)}return yt.indices=ft,yt=u.GeometryPipeline.combineInstances([new s.GeometryInstance({geometry:w}),new s.GeometryInstance({geometry:yt})]),yt[0]}const S=[new e.Cartesian3,new e.Cartesian3,new e.Cartesian3,new e.Cartesian3],I=new e.Cartographic,H=new e.Cartographic;function z(t,n,a,o,r){if(0===a)return e.Rectangle.clone(t,r);const i=p.RectangleGeometryLibrary.computeOptions(t,n,a,0,E,I),s=i.height,l=i.width,u=S;return p.RectangleGeometryLibrary.computePosition(i,o,!1,0,0,u[0]),p.RectangleGeometryLibrary.computePosition(i,o,!1,0,l-1,u[1]),p.RectangleGeometryLibrary.computePosition(i,o,!1,s-1,0,u[2]),p.RectangleGeometryLibrary.computePosition(i,o,!1,s-1,l-1,u[3]),e.Rectangle.fromCartesianArray(u,o,r)}function B(n){const r=(n=t.defaultValue(n,t.defaultValue.EMPTY_OBJECT)).rectangle;if(a.Check.typeOf.object("rectangle",r),e.Rectangle.validate(r),r.north<r.south)throw new a.DeveloperError("options.rectangle.north must be greater than or equal to options.rectangle.south");const i=t.defaultValue(n.height,0),s=t.defaultValue(n.extrudedHeight,i);this._rectangle=e.Rectangle.clone(r),this._granularity=t.defaultValue(n.granularity,o.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.Ellipsoid.clone(t.defaultValue(n.ellipsoid,e.Ellipsoid.WGS84)),this._surfaceHeight=Math.max(i,s),this._rotation=t.defaultValue(n.rotation,0),this._stRotation=t.defaultValue(n.stRotation,0),this._vertexFormat=d.VertexFormat.clone(t.defaultValue(n.vertexFormat,d.VertexFormat.DEFAULT)),this._extrudedHeight=Math.min(i,s),this._shadowVolume=t.defaultValue(n.shadowVolume,!1),this._workerName="createRectangleGeometry",this._offsetAttribute=n.offsetAttribute,this._rotatedRectangle=void 0,this._textureCoordinateRotationPoints=void 0}B.packedLength=e.Rectangle.packedLength+e.Ellipsoid.packedLength+d.VertexFormat.packedLength+7,B.pack=function(n,o,r){return a.Check.typeOf.object("value",n),a.Check.defined("array",o),r=t.defaultValue(r,0),e.Rectangle.pack(n._rectangle,o,r),r+=e.Rectangle.packedLength,e.Ellipsoid.pack(n._ellipsoid,o,r),r+=e.Ellipsoid.packedLength,d.VertexFormat.pack(n._vertexFormat,o,r),r+=d.VertexFormat.packedLength,o[r++]=n._granularity,o[r++]=n._surfaceHeight,o[r++]=n._rotation,o[r++]=n._stRotation,o[r++]=n._extrudedHeight,o[r++]=n._shadowVolume?1:0,o[r]=t.defaultValue(n._offsetAttribute,-1),o};const U=new e.Rectangle,q=e.Ellipsoid.clone(e.Ellipsoid.UNIT_SPHERE),Y={rectangle:U,ellipsoid:q,vertexFormat:N,granularity:void 0,height:void 0,rotation:void 0,stRotation:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};B.unpack=function(n,o,r){a.Check.defined("array",n),o=t.defaultValue(o,0);const i=e.Rectangle.unpack(n,o,U);o+=e.Rectangle.packedLength;const s=e.Ellipsoid.unpack(n,o,q);o+=e.Ellipsoid.packedLength;const l=d.VertexFormat.unpack(n,o,N);o+=d.VertexFormat.packedLength;const u=n[o++],c=n[o++],m=n[o++],p=n[o++],g=n[o++],y=1===n[o++],f=n[o];return t.defined(r)?(r._rectangle=e.Rectangle.clone(i,r._rectangle),r._ellipsoid=e.Ellipsoid.clone(s,r._ellipsoid),r._vertexFormat=d.VertexFormat.clone(l,r._vertexFormat),r._granularity=u,r._surfaceHeight=c,r._rotation=m,r._stRotation=p,r._extrudedHeight=g,r._shadowVolume=y,r._offsetAttribute=-1===f?void 0:f,r):(Y.granularity=u,Y.height=c,Y.rotation=m,Y.stRotation=p,Y.extrudedHeight=g,Y.shadowVolume=y,Y.offsetAttribute=-1===f?void 0:f,new B(Y))},B.computeRectangle=function(n,r){const i=(n=t.defaultValue(n,t.defaultValue.EMPTY_OBJECT)).rectangle;if(a.Check.typeOf.object("rectangle",i),e.Rectangle.validate(i),i.north<i.south)throw new a.DeveloperError("options.rectangle.north must be greater than or equal to options.rectangle.south");const s=t.defaultValue(n.granularity,o.CesiumMath.RADIANS_PER_DEGREE),l=t.defaultValue(n.ellipsoid,e.Ellipsoid.WGS84);return z(i,s,t.defaultValue(n.rotation,0),l,r)};const j=new e.Matrix3,X=new n.Quaternion,Q=new e.Cartographic;B.createGeometry=function(a){if(o.CesiumMath.equalsEpsilon(a._rectangle.north,a._rectangle.south,o.CesiumMath.EPSILON10)||o.CesiumMath.equalsEpsilon(a._rectangle.east,a._rectangle.west,o.CesiumMath.EPSILON10))return;let i=a._rectangle;const s=a._ellipsoid,u=a._rotation,c=a._stRotation,d=a._vertexFormat,g=p.RectangleGeometryLibrary.computeOptions(i,a._granularity,u,c,E,I,H),y=j;if(0!==c||0!==u){const t=e.Rectangle.center(i,Q),a=s.geodeticSurfaceNormalCartographic(t,D);n.Quaternion.fromAxisAngle(a,-c,X),e.Matrix3.fromQuaternion(X,y)}else e.Matrix3.clone(e.Matrix3.IDENTITY,y);const f=a._surfaceHeight,h=a._extrudedHeight,b=!o.CesiumMath.equalsEpsilon(f,h,0,o.CesiumMath.EPSILON2);let _,A;if(g.lonScalar=1/a._rectangle.width,g.latScalar=1/a._rectangle.height,g.tangentRotationMatrix=y,i=a._rectangle,b){_=k(a,g);const t=n.BoundingSphere.fromRectangle3D(i,s,f,P),e=n.BoundingSphere.fromRectangle3D(i,s,h,F);A=n.BoundingSphere.union(t,e)}else{if(_=M(a,g),_.attributes.position.values=m.PolygonPipeline.scaleToGeodeticHeight(_.attributes.position.values,f,s,!1),t.defined(a._offsetAttribute)){const t=_.attributes.position.values.length,e=a._offsetAttribute===l.GeometryOffsetAttribute.NONE?0:1,n=new Uint8Array(t/3).fill(e);_.attributes.applyOffset=new r.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:n})}A=n.BoundingSphere.fromRectangle3D(i,s,f)}return d.position||delete _.attributes.position,new r.Geometry({attributes:_.attributes,indices:_.indices,primitiveType:_.primitiveType,boundingSphere:A,offsetAttribute:a._offsetAttribute})},B.createShadowVolume=function(t,e,n){const a=t._granularity,o=t._ellipsoid,r=e(a,o),i=n(a,o);return new B({rectangle:t._rectangle,rotation:t._rotation,ellipsoid:o,stRotation:t._stRotation,granularity:a,extrudedHeight:i,height:r,vertexFormat:d.VertexFormat.POSITION_ONLY,shadowVolume:!0})};const W=new e.Rectangle,J=[new e.Cartesian2,new e.Cartesian2,new e.Cartesian2],Z=new e.Matrix2,K=new e.Cartographic;return Object.defineProperties(B.prototype,{rectangle:{get:function(){return t.defined(this._rotatedRectangle)||(this._rotatedRectangle=z(this._rectangle,this._granularity,this._rotation,this._ellipsoid)),this._rotatedRectangle}},textureCoordinateRotationPoints:{get:function(){return t.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(t){if(0===t._stRotation)return[0,0,0,1,1,0];const n=e.Rectangle.clone(t._rectangle,W),a=t._granularity,o=t._ellipsoid,r=z(n,a,t._rotation-t._stRotation,o,W),i=J;i[0].x=r.west,i[0].y=r.south,i[1].x=r.west,i[1].y=r.north,i[2].x=r.east,i[2].y=r.south;const s=t.rectangle,l=e.Matrix2.fromRotation(t._stRotation,Z),u=e.Rectangle.center(s,K);for(let t=0;t<3;++t){const n=i[t];n.x-=u.longitude,n.y-=u.latitude,e.Matrix2.multiplyByVector(l,n,n),n.x+=u.longitude,n.y+=u.latitude,n.x=(n.x-s.west)/s.width,n.y=(n.y-s.south)/s.height}const c=i[0],m=i[1],p=i[2],d=new Array(6);return e.Cartesian2.pack(c,d),e.Cartesian2.pack(m,d,2),e.Cartesian2.pack(p,d,4),d}(this)),this._textureCoordinateRotationPoints}}}),function(n,a){return t.defined(a)&&(n=B.unpack(n,a)),n._ellipsoid=e.Ellipsoid.clone(n._ellipsoid),n._rectangle=e.Rectangle.clone(n._rectangle),B.createGeometry(n)}}));
//# sourceMappingURL=createRectangleGeometry.js.map
